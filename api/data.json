{
    "project": {
        "name": "gooddata",
        "description": "GoodData JavaScript SDK",
        "version": "0.1.54",
        "url": ""
    },
    "files": {
        "src/catalogue.js": {
            "name": "src/catalogue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/config.js": {
            "name": "src/config.js",
            "modules": {
                "config": 1
            },
            "classes": {
                "config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/execution.js": {
            "name": "src/execution.js",
            "modules": {
                "execution": 1
            },
            "classes": {
                "execution": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/gooddata.js": {
            "name": "src/gooddata.js",
            "modules": {
                "sdk": 1
            },
            "classes": {
                "sdk": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/metadata.js": {
            "name": "src/metadata.js",
            "modules": {
                "metadata": 1
            },
            "classes": {
                "metadata": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/project.js": {
            "name": "src/project.js",
            "modules": {
                "project": 1
            },
            "classes": {
                "project": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/user.js": {
            "name": "src/user.js",
            "modules": {
                "user": 1
            },
            "classes": {
                "user": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util.js": {
            "name": "src/util.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/xhr.js": {
            "name": "src/xhr.js",
            "modules": {
                "xhr": 1
            },
            "classes": {
                "xhr": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "config": {
            "name": "config",
            "submodules": {},
            "elements": {},
            "classes": {
                "config": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/config.js",
            "line": 2,
            "description": "Config module holds SDK configuration variables\n\nCurrently its only custom domain - which enabled using\nsdk from different domain (using CORS)\n\nNever set properties directly - always use setter methods"
        },
        "execution": {
            "name": "execution",
            "submodules": {},
            "elements": {},
            "classes": {
                "execution": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/execution.js",
            "line": 50,
            "description": "Module for execution on experimental execution resource"
        },
        "sdk": {
            "name": "sdk",
            "submodules": {},
            "elements": {},
            "classes": {
                "sdk": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/gooddata.js",
            "line": 10,
            "description": "# JS SDK\nHere is a set of functions that mostly are a thin wraper over the [GoodData API](https://developer.gooddata.com/api).\nBefore calling any of those functions, you need to authenticate with a valid GoodData\nuser credentials. After that, every subsequent call in the current session is authenticated.\nYou can find more about the GD authentication mechanism here.\n\n## Conventions and Dependencies\n* Depends on [jQuery JavaScript library](http://jquery.com/) javascript library\n* Each SDK function returns [jQuery Deferred promise](http://api.jquery.com/deferred.promise/)\n\n## GD Authentication Mechansim\nIn this JS SDK library we provide you with a simple `login(username, passwd)` function\nthat does the magic for you.\nTo fully understand the authentication mechansim, please read\n[Authentication via API article](http://developer.gooddata.com/article/authentication-via-api)\non [GoodData Developer Portal](http://developer.gooddata.com/)"
        },
        "metadata": {
            "name": "metadata",
            "submodules": {},
            "elements": {},
            "classes": {
                "metadata": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/metadata.js",
            "line": 7,
            "description": "Functions for working with metadata objects"
        },
        "project": {
            "name": "project",
            "submodules": {},
            "elements": {},
            "classes": {
                "project": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/project.js",
            "line": 6,
            "description": "Functions for working with projects"
        },
        "user": {
            "name": "user",
            "submodules": {},
            "elements": {},
            "classes": {
                "user": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/user.js",
            "line": 5
        },
        "util": {
            "name": "util",
            "submodules": {},
            "elements": {},
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/util.js",
            "line": 5,
            "description": "Utility methods. Mostly private"
        },
        "xhr": {
            "name": "xhr",
            "submodules": {},
            "elements": {},
            "classes": {
                "xhr": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/xhr.js",
            "line": 13,
            "description": "Ajax wrapper around GDC authentication mechanisms, SST and TT token handling and polling.\nInteface is same as original jQuery.ajax.\n\nIf token is expired, current request is \"paused\", token is refreshed and request is retried and result.\nis transparently returned to original call.\n\nAdditionally polling is handled. Only final result of polling returned."
        }
    },
    "classes": {
        "config": {
            "name": "config",
            "shortname": "config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "config",
            "namespace": "",
            "file": "src/config.js",
            "line": 2,
            "description": "Config module holds SDK configuration variables\n\nCurrently its only custom domain - which enabled using\nsdk from different domain (using CORS)\n\nNever set properties directly - always use setter methods"
        },
        "execution": {
            "name": "execution",
            "shortname": "execution",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "execution",
            "namespace": "",
            "file": "src/execution.js",
            "line": 50,
            "description": "Module for execution on experimental execution resource"
        },
        "sdk": {
            "name": "sdk",
            "shortname": "sdk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sdk",
            "namespace": "",
            "file": "src/gooddata.js",
            "line": 10,
            "description": "# JS SDK\nHere is a set of functions that mostly are a thin wraper over the [GoodData API](https://developer.gooddata.com/api).\nBefore calling any of those functions, you need to authenticate with a valid GoodData\nuser credentials. After that, every subsequent call in the current session is authenticated.\nYou can find more about the GD authentication mechanism here.\n\n## Conventions and Dependencies\n* Depends on [jQuery JavaScript library](http://jquery.com/) javascript library\n* Each SDK function returns [jQuery Deferred promise](http://api.jquery.com/deferred.promise/)\n\n## GD Authentication Mechansim\nIn this JS SDK library we provide you with a simple `login(username, passwd)` function\nthat does the magic for you.\nTo fully understand the authentication mechansim, please read\n[Authentication via API article](http://developer.gooddata.com/article/authentication-via-api)\non [GoodData Developer Portal](http://developer.gooddata.com/)"
        },
        "metadata": {
            "name": "metadata",
            "shortname": "metadata",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "metadata",
            "namespace": "",
            "file": "src/metadata.js",
            "line": 7,
            "description": "Functions for working with metadata objects"
        },
        "project": {
            "name": "project",
            "shortname": "project",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "project",
            "namespace": "",
            "file": "src/project.js",
            "line": 6,
            "description": "Functions for working with projects"
        },
        "user": {
            "name": "user",
            "shortname": "user",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "user",
            "namespace": "",
            "file": "src/user.js",
            "line": 5
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "src/util.js",
            "line": 5,
            "description": "Utility methods. Mostly private"
        },
        "xhr": {
            "name": "xhr",
            "shortname": "xhr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xhr",
            "namespace": "",
            "file": "src/xhr.js",
            "line": 13,
            "description": "Ajax wrapper around GDC authentication mechanisms, SST and TT token handling and polling.\nInteface is same as original jQuery.ajax.\n\nIf token is expired, current request is \"paused\", token is refreshed and request is retried and result.\nis transparently returned to original call.\n\nAdditionally polling is handled. Only final result of polling returned."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/catalogue.js",
            "line": 68,
            "description": "Convert specific params in options to \"requiredDataSets\" structure. For more details look into\nres file https://github.com/gooddata/gdc-bear/blob/develop/resources/specification/internal/catalog.res",
            "params": [
                {
                    "name": "options",
                    "description": "Supported keys in options are:\n<ul>\n<li>dataSetIdentifier - in value is string identifier of dataSet - this leads to CUSTOM type\n<li>returnAllDateDataSets - true value means to return ALL values without dataSet differentiation\n<li>by default we get PRODUCTION dataSets\n</ul>"
                }
            ],
            "return": {
                "description": "\"requiredDataSets\" object hash.",
                "type": "Object"
            },
            "class": "config"
        },
        {
            "file": "src/config.js",
            "line": 18,
            "description": "Sets custom domain. Parameter is url which has always to be https://\n(if you don't provide it, we will do it for you).\n\nRegExp inspired taken from\nhttps://github.com/jarib/google-closure-library/blob/master/closure/goog/string/linkify.js",
            "itemtype": "method",
            "name": "setCustomDomain",
            "class": "config",
            "module": "config"
        },
        {
            "file": "src/execution.js",
            "line": 57,
            "description": "For the given projectId it returns table structure with the given\nelements in column headers.",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "projectId",
                    "description": "- GD project identifier",
                    "type": "String"
                },
                {
                    "name": "columns",
                    "description": "- An array of attribute or metric identifiers.",
                    "type": "Array"
                },
                {
                    "name": "executionConfiguration",
                    "description": "- Execution configuration - can contain for example\n                property \"filters\" containing execution context filters\n                property \"where\" containing query-like filters\n                property \"orderBy\" contains array of sorted properties to order in form\n                     [{column: 'identifier', direction: 'asc|desc'}]",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- AJAX settings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Structure with `headers` and `rawData` keys filled with values from execution.",
                "type": "Object"
            },
            "class": "execution",
            "module": "execution"
        },
        {
            "file": "src/metadata.js",
            "line": 14,
            "description": "Load all objects with given uris\n(use bulk loading instead of getting objects one by one)",
            "itemtype": "method",
            "name": "getObjects",
            "params": [
                {
                    "name": "projectId",
                    "description": "id of the project",
                    "type": "String"
                },
                {
                    "name": "objectUris",
                    "description": "array of uris for objects to be loaded",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of loaded elements",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 46,
            "description": "Get MD objects from using2 resource. Include only objects of given types\nand take care about fetching only nearest objects if requested.",
            "itemtype": "method",
            "name": "getObjectUsing",
            "params": [
                {
                    "name": "projectId",
                    "description": "id of the project",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "uri of the object for which dependencies are to be found",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "objects with options:\n       - types {Array} array of strings with object types to be included\n       - nearest {Boolean} whether to include only nearest dependencies",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "entries returned by using2 resource",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 75,
            "description": "Get additional information about elements specified by their uris\n`elementUris` is the array of uris of elements to be look-up\nCurrently makes a request for each object, should be encapsulated\nto one call",
            "itemtype": "method",
            "name": "getElementDetails",
            "params": [
                {
                    "name": "array",
                    "description": "of element uri strings",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 149,
            "description": "Reutrns all attributes in a project specified by projectId param",
            "itemtype": "method",
            "name": "getAttributes",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project identifier"
                }
            ],
            "return": {
                "description": "An array of attribute objects",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 160,
            "description": "Returns all dimensions in a project specified by projectId param",
            "itemtype": "method",
            "name": "getDimensions",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project identifier"
                }
            ],
            "return": {
                "description": "An array of dimension objects",
                "type": "Array"
            },
            "see": [
                "getFolders"
            ],
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 172,
            "description": "Returns project folders. Folders can be of specific types and you can specify\nthe type you need by passing and optional `type` parameter",
            "itemtype": "method",
            "name": "getFolders",
            "params": [
                {
                    "name": "projectId",
                    "description": "- Project identifier",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "- Optional, possible values are `metric`, `fact`, `attribute`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of dimension objects",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 207,
            "description": "Get folders with items.\nReturns array of folders, each having a title and items property which is an array of\ncorresponding items. Each item is either a metric or attribute, keeping its original\nverbose structure.",
            "itemtype": "method",
            "name": "getFoldersWithItems",
            "params": [
                {
                    "name": "type",
                    "description": "type of folders to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of folder object, each containing title and\ncorresponding items.",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 370,
            "description": "Returns all facts in a project specified by the given projectId",
            "itemtype": "method",
            "name": "getFacts",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project identifier"
                }
            ],
            "return": {
                "description": "An array of fact objects",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 381,
            "description": "Returns all metrics in a project specified by the given projectId",
            "itemtype": "method",
            "name": "getMetrics",
            "params": [
                {
                    "name": "projectId",
                    "description": "Project identifier"
                }
            ],
            "return": {
                "description": "An array of metric objects",
                "type": "Array"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 392,
            "description": "Returns all metrics that are reachable (with respect to ldm of the project\nspecified by the given projectId) for given attributes",
            "itemtype": "method",
            "name": "getAvailableMetrics",
            "params": [
                {
                    "name": "projectId",
                    "description": "- Project identifier",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- An array of attribute uris for which we want to get\navailabale metrics",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of reachable metrics for the given attrs",
                "type": "Array"
            },
            "see": [
                "getAvailableAttributes",
                "getAvailableFacts"
            ],
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 418,
            "description": "Returns all attributes that are reachable (with respect to ldm of the project\nspecified by the given projectId) for given metrics (also called as drillCrossPath)",
            "itemtype": "method",
            "name": "getAvailableAttributes",
            "params": [
                {
                    "name": "projectId",
                    "description": "- Project identifier",
                    "type": "String"
                },
                {
                    "name": "metrics",
                    "description": "- An array of metric uris for which we want to get\navailabale attributes",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of reachable attributes for the given metrics",
                "type": "Array"
            },
            "see": [
                "getAvailableMetrics",
                "getAvailableFacts"
            ],
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 444,
            "description": "Returns all attributes that are reachable (with respect to ldm of the project\nspecified by the given projectId) for given metrics (also called as drillCrossPath)",
            "itemtype": "method",
            "name": "getAvailableFacts",
            "params": [
                {
                    "name": "projectId",
                    "description": "- Project identifier",
                    "type": "String"
                },
                {
                    "name": "items",
                    "description": "- An array of metric or attribute uris for which we want to get\navailabale facts",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of reachable facts for the given items",
                "type": "Array"
            },
            "see": [
                "getAvailableAttributes",
                "getAvailableMetrics"
            ],
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 470,
            "description": "Get details of a metadata object specified by its uri",
            "itemtype": "method",
            "name": "getObjectDetails",
            "params": [
                {
                    "name": "uri",
                    "description": "uri of the metadata object for which details are to be retrieved"
                }
            ],
            "return": {
                "description": "object details",
                "type": "Object"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 493,
            "description": "Get identifier of a metadata object identified by its uri",
            "itemtype": "method",
            "name": "getObjectIdentifier",
            "params": [
                {
                    "name": "uri",
                    "description": "uri of the metadata object for which the identifier is to be retrieved"
                }
            ],
            "return": {
                "description": "object identifier",
                "type": "String"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/metadata.js",
            "line": 525,
            "description": "Get uri of an metadata object, specified by its identifier and project id it belongs to",
            "itemtype": "method",
            "name": "getObjectUri",
            "params": [
                {
                    "name": "projectId",
                    "description": "id of the project"
                },
                {
                    "name": "identifier",
                    "description": "identifier of the metadata object"
                }
            ],
            "return": {
                "description": "uri of the metadata object",
                "type": "String"
            },
            "class": "metadata",
            "module": "metadata"
        },
        {
            "file": "src/project.js",
            "line": 14,
            "description": "Get current project id",
            "itemtype": "method",
            "name": "getCurrentProjectId",
            "return": {
                "description": "current project identifier",
                "type": "String"
            },
            "class": "project",
            "module": "project"
        },
        {
            "file": "src/project.js",
            "line": 32,
            "description": "Fetches projects available for the user represented by the given profileId",
            "itemtype": "method",
            "name": "getProjects",
            "params": [
                {
                    "name": "profileId",
                    "description": "- User profile identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An Array of projects",
                "type": "Array"
            },
            "class": "project",
            "module": "project"
        },
        {
            "file": "src/project.js",
            "line": 45,
            "description": "Fetches all datasets for the given project",
            "itemtype": "method",
            "name": "getDatasets",
            "params": [
                {
                    "name": "projectId",
                    "description": "- GD project identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of objects containing datasets metadata",
                "type": "Array"
            },
            "class": "project",
            "module": "project"
        },
        {
            "file": "src/project.js",
            "line": 77,
            "description": "Fetches a chart color palette for a project represented by the given\nprojectId parameter.",
            "itemtype": "method",
            "name": "getColorPalette",
            "params": [
                {
                    "name": "projectId",
                    "description": "- A project identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of objects with r, g, b fields representing a project's\ncolor palette",
                "type": "Array"
            },
            "class": "project",
            "module": "project"
        },
        {
            "file": "src/project.js",
            "line": 109,
            "description": "Sets given colors as a color palette for a given project.",
            "itemtype": "method",
            "name": "setColorPalette",
            "params": [
                {
                    "name": "projectId",
                    "description": "- GD project identifier",
                    "type": "String"
                },
                {
                    "name": "colors",
                    "description": "- An array of colors that we want to use within the project.\nEach color should be an object with r, g, b fields.",
                    "type": "Array"
                }
            ],
            "class": "project",
            "module": "project"
        },
        {
            "file": "src/project.js",
            "line": 138,
            "description": "Gets current timezone and its offset. Example output:\n\n    {\n        id: 'Europe/Prague',\n        displayName: 'Central European Time',\n        currentOffsetMs: 3600000\n    }",
            "itemtype": "method",
            "name": "getTimezone",
            "params": [
                {
                    "name": "projectId",
                    "description": "- GD project identifier",
                    "type": "String"
                }
            ],
            "class": "project",
            "module": "project"
        },
        {
            "file": "src/user.js",
            "line": 10,
            "description": "Find out whether a user is logged in\n\nReturns a promise which either:\n**resolves** - which means user is logged in or\n**rejects** - meaning is not logged in",
            "itemtype": "method",
            "name": "isLoggedIn",
            "class": "user",
            "module": "user"
        },
        {
            "file": "src/user.js",
            "line": 23,
            "description": "This function provides an authentication entry point to the GD API. It is needed to authenticate\nby calling this function prior any other API calls. After providing valid credentials\nevery subsequent API call in a current session will be authenticated.",
            "itemtype": "method",
            "name": "login",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "user",
            "module": "user"
        },
        {
            "file": "src/user.js",
            "line": 46,
            "description": "Logs out current user",
            "itemtype": "method",
            "name": "logout",
            "class": "user",
            "module": "user"
        },
        {
            "file": "src/user.js",
            "line": 70,
            "description": "Updates user's profile settings",
            "itemtype": "method",
            "name": "updateProfileSettings",
            "params": [
                {
                    "name": "profileId",
                    "description": "- User profile identifier",
                    "type": "String"
                },
                {
                    "name": "profileSetting",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "user",
            "module": "user"
        },
        {
            "file": "src/user.js",
            "line": 88,
            "description": "Returns info about currently logged in user from bootstrap resource",
            "itemtype": "method",
            "name": "getAccountInfo",
            "class": "user",
            "module": "user"
        },
        {
            "file": "src/util.js",
            "line": 13,
            "description": "Create getter function for accessing nested objects",
            "params": [
                {
                    "name": "path",
                    "description": "Target path to nested object",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getIn",
            "access": "private",
            "tagname": "",
            "class": "util",
            "module": "util"
        },
        {
            "file": "src/xhr.js",
            "line": 105,
            "description": "additional ajax configuration specific for xhr module, keys\n  unauthorized: function(xhr) - called when user is unauthorized and token renewal failed\n  pollDelay: int - polling interval in milliseconds, default 1000 - or generator function\n\nmethod also accepts any option from original $.ajaxSetup. Options will be applied to all call of xhr.ajax().\n\nxhrSetup behave similar tp $.ajaxSetup, each call replaces settings completely.\nOptions can be also passed to particular xhr.ajax calls (same as optios for $.ajax and $.ajaxSetup)",
            "itemtype": "method",
            "name": "ajaxSetup",
            "class": "xhr",
            "module": "xhr"
        },
        {
            "file": "src/xhr.js",
            "line": 127,
            "description": "Same api as jQuery.ajax - arguments (url, settings) or (settings) with url inside\nAdditionally content type is automatically json, and object in settings.data is converted to string\nto be consumed by GDC backend.\n\nsettings additionally accepts keys: unauthorized, pollDelay (see xhrSetup for more details)",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "url",
                    "description": "request url"
                },
                {
                    "name": "settings",
                    "description": "settings object"
                }
            ],
            "class": "xhr",
            "module": "xhr"
        },
        {
            "file": "src/xhr.js",
            "line": 201,
            "description": "Wrapper for xhr.ajax method GET",
            "itemtype": "method",
            "name": "get",
            "class": "xhr",
            "module": "xhr"
        },
        {
            "file": "src/xhr.js",
            "line": 207,
            "description": "Wrapper for xhr.ajax method POST",
            "itemtype": "method",
            "name": "post",
            "class": "xhr",
            "module": "xhr"
        },
        {
            "file": "src/xhr.js",
            "line": 213,
            "description": "Wrapper for xhr.ajax method PUT",
            "itemtype": "method",
            "name": "put",
            "class": "xhr",
            "module": "xhr"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/catalogue.js:68"
        },
        {
            "message": "Missing item type\nConvert specific params in options to \"requiredDataSets\" structure. For more details look into\nres file https://github.com/gooddata/gdc-bear/blob/develop/resources/specification/internal/catalog.res",
            "line": " src/catalogue.js:68"
        }
    ]
}